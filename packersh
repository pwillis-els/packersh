#!/usr/bin/env bash
# packersh - Bash wrapper around Packer
# Copyright (C) 2020-2021 Peter Willis

set -e -u -o pipefail
[ "${DEBUG:-0}" = "1" ] && set -x       # set DEBUG=1 to enable tracing
VERSION="0.12"

# ---------------------------------------------------------------------------------------- #
_usage () {
    cat <<EOTUSAGE
    packersh v$VERSION
    Usage: $0 [OPTIONS] [PKRVARS] COMMAND [..]

# Options

  Pass these OPTIONS before any others (see examples); do not pass them after
  PKRVARS or COMMANDs.

    -f FILE         A file passed to Terraform's -var-file option.
                      ( config: VARFILES= )
    -T TEMPLATE     Packer template to pass to 'packer build', packer validate'
                      ( config: PACKER_TEMPLATE= )
    -C DIR          Change to directory DIR.
                      ( config: CD_DIR= )
    -c file         Specify a '.packershrc' configuration file to load.
    -E EXPR         Evaluate an expression in bash ('eval EXPR').
    -I              Disables automatically loading any 'packer.sh.pkr.hcl'
                    or 'packer.sh.pkr.json' files 
                    found while recursively searching parent directories.
                      ( config: INHERIT_PKRFILES=0 )
    -D              Don't run 'dependency' commands (e.g. don't run "packer
                    init" before "packer apply").
                      ( config: NO_DEP_CMDS=1 )
    -N              Dry-run mode (don't execute anything).
                      ( config: DRYRUN=1 )
    -n              Don't remove the temporary PKR_DATA_DIR.
                      ( config: NO_CLEANUP_TMP=1 )
    -v              Verbose mode.
                      ( config: DEBUG=1 )
    -h              This help screen.

# Commands

  The following are Terraform commands that packersh provides wrappers for
  (there's some Terraformsh-specific logic behind the scenes). Other Terraform
  commands not listed here are passed through to Terraform verbatim.

    build             Run init, validate, \`packer build @VARFILE_ARG [ARGS ..]\`
    validate          Run init, get, \`packer validate [ARGS ..]\`
    init              Run clean_modules, \`packer init @VARFILE_ARG\`

  The following commands are specific to packersh:

    shell             Run init, get, and \`bash -i -l\`
    clean             Remove '.packer/modules/*', packer.pkrstate files, and .plan files
    clean_modules     Run \`rm -v -rf .packer/modules/*\`
    approve           Prompts the user to approve the next step, or the program will exit with an error.
    aws_bootstrap     Looks for 'bucket' and 'dynamodb_table' in your '-b' file options.
                      If found, creates the bucket and table and initializes your Terraform state with them.

All arguments after a COMMAND are evaluated for whether they match a Terraform
or Terraformsh command; if they don't, they are assumed to be options and are
passed to the first recognized command that precedes them.
EOTUSAGE
    exit 1
}
# Commands collected from versions 0.11,0.12,0.13,0.14,0.15,1.0,1.1
declare -a PKR_COMMANDS=(build console fix fmt hcl2_upgrade init inspect validate version)
declare -a WRAPPER_COMMANDS=(shell clean clean_modules approve)

# ---------------------------------------------------------------------------------------- #
# ------------------           functions                       --------------------------- #

_cmd_build () {
    declare -a args=("$@")
    [ "${NO_DEP_CMDS:-0}" = "0" ] && _cmd_validate "${args[@]}"
    _runcmd "$PACKER" build "${VARFILE_ARG[@]}" "${BUILD_ARGS[@]}" "${args[@]}" "${PACKER_TEMPLATE:-}"
}
_cmd_validate () {
    [ "${NO_DEP_CMDS:-0}" = "0" ] && _cmd_init
    declare -a args=("$@")
    #declare -a pkrver_a=($(_pkr_ver))
    ## If packer version < 0.12, pass VARFILE_ARG to validate. Otherwise it's deprecated
    #if [ "${pkrver_a[0]:-}" = "0" ] && [ ${pkrver_a[1]:-} -lt 12 ] ; then
        args+=("${VARFILE_ARG[@]}")
    #fi
    _runcmd "$PACKER" validate "${VALIDATE_ARGS[@]}" "${args[@]}" "${PACKER_TEMPLATE:-}"
}
# Note: this line may need to be modified to pipe 'yes no | ' to the beginning 
# of the Terraform command, if you notice any problems with init in the future.
_cmd_init () {
    [ "${_already_ran_cmd_init:-0}" = "1" ] && return 0
    _already_ran_cmd_init=1
    declare -a args=("$@")
    #args+=("${VARFILES[@]}")
    args+="."
    _runcmd "$PACKER" init "${INIT_ARGS[@]}" "${args[@]}"
}
_cmd_catchall () {
    _runcmd "$PACKER" "$@"
}
# The following allows you to do something like 'packersh plan shell' to drop
# into a shell in the working directory of the root module to be used, with
# everything ready to run 'packer' commands (such as 'packer state list')
_cmd_shell () {
    [ "${NO_DEP_CMDS:-0}" = "0" ] && _cmd_init
    _runcmd bash -i -l
}
# This is basically in case the directory structure where this runs was changed
# after an initial packer run. Terraform sucks at cleaning up broken symlinks
# and its modules.json, so unless we want to have a *ton* of complex logic here,
# just blow modules away every time.
_cmd_approve () {
    echo ""
    read -p "$0: Are you SURE you want to continue with the next commands? Type 'YES' to continue: " APPROVE
    if [ "$APPROVE" = "YES" ] ; then
        echo "$0: Approval given; continuing!" ; echo ""
    else
        echo "$0: Approval not given; exiting!" ; exit 1
    fi
}

_cleanup_tmp () {
    if [ "${NO_CLEANUP_TMP_ON_ERROR:-0}" = "1" ] ; then
        echo "$0: Error detected; not removing '${PKR_TMPDIR:-}'"
    else
        if [ "${NO_CLEANUP_TMP:-0}" = "1" ] ; then
            echo "$0: Not removing temporary PKR_DATA_DIR '${PKR_TMPDIR:-}'"
        elif [ -n "${PKR_TMPDIR:-}" ] ; then
            rm -rf "$PKR_TMPDIR"
        fi
    fi
}
_pkr_ver () {
    local pkr_ver
    pkr_ver="$($PACKER --version | grep '^Terraform v' | cut -d 'v' -f 2)"
    if [ $? -ne 0 ] ; then
        echo "$0: Error: 'packer --version' failed?" 1>&2
        return 1
    fi
    IFS=. read -r -a pkrver_a <<< "${pkr_ver}"
    printf "%s\n" "${pkrver_a[@]}"
}
_pkr_set_datadir () {
    # Generate a temporary, but predictable, PKR_DATA_DIR, if not set yet
    if [ -z "${PKR_DD_UNIQUE_NAME:-}" ] ; then
        # Generate a truncated MD5 hash based on the name of both the directory where
        # we ran packersh from, and any '-C' option (the root module). This way we
        # can run 'packersh' from the same directory on multiple root modules, and
        # they will each end up with a different PKR_DATA_DIR.
        PKR_DD_UNIQUE_NAME="$(printf "%s\n%s\n" "$PACKER_PWD" "$PACKER_MODULE_PWD" | md5sum - | awk '{print $1}' | cut -b 1-10)"
    fi
    if [ -z "${PKR_DATA_DIR:-}" ] ; then
        _cleanup_tmp
        export PKR_TMPDIR="${TMPDIR:-/tmp}/pkrsh.$PKR_DD_UNIQUE_NAME"
        mkdir -p "$PKR_TMPDIR"
        trap _cleanup_tmp EXIT
        export PKR_DATA_DIR="$PKR_TMPDIR"
    fi
}
_default_vars () {
    # Help load AWS credentials, and silence some messages for automation.
    AWS_SDK_LOAD_CONFIG="${AWS_SDK_LOAD_CONFIG:-1}"
    PKR_IN_AUTOMATION="${PKR_IN_AUTOMATION:-1}"

    export AWS_SDK_LOAD_CONFIG PKR_IN_AUTOMATION

    # Override these variables to change the config files that are automatically loaded
    # when found in any parent directories (disable with the '-I' option).
    PKR_AUTO_CONFIG_FILE="${PKR_AUTO_CONFIG_FILE:-packer.sh.pkr.hcl}"

    # This enables the above functionality by default ('-I' sets this to 0)
    INHERIT_PKRFILES="${INHERIT_PKRFILES:-1}"

    CD_DIR=""
    PACKER="${PACKER:-packer}" # the packer executable
    BUILD_ARGS=()
    INIT_ARGS=()
    VALIDATE_ARGS=()

    PACKER_TEMPLATE=""
    PACKER_PWD="$(pwd)"
}
_pre_dirchange_vars () {
    if [ ${#VARFILES[@]} -gt 0 ] ; then
        for arg in "${VARFILES[@]}" ; do
            VARFILE_ARG+=("-var-file" "$(_readlinkf --preserve-link "$arg")")
        done
    fi
}
_final_vars () {
    PACKER_MODULE_PWD="$(pwd)"
    [ -n "${PACKER_TEMPLATE:-}" ] && PACKER_TEMPLATE="$(_readlinkf "${PACKER_TEMPLATE}")"
    _pkr_set_datadir
}
_load_conf () {
    # Don't load the default configs if one was passed via '-c'
    if [ ${#CONF_FILE[@]} -lt 1 ] ; then
        for f in "/etc/packersh" ~/.packershrc "./.packershrc" "packersh.conf" ; do
            [ -e "$f" ] && . "$(_readlinkf "$f")"
        done
    # If '-c' was passed, let the user pass only the configs they want to load.
    elif [ ${#CONF_FILE[@]} -gt 0 ] ; then
        for conf in "${CONF_FILE[@]}" ; do
            # NOTE: This is not a replacement for 'readlink -f'; if you want
            # that behavior, pass the real file path yourself, don't rely on this.
            . "$(_readlinkf "$conf")"
        done
    fi
    return 0
}
_load_parent_pkrfiles () {
    if [ "${INHERIT_PKRFILES:-0}" = "1" ] ; then
        while read -r LINE ; do VARFILES=("$LINE" "${VARFILES[@]}") ; done < <( _rfindfiles "$PKR_AUTO_CONFIG_FILE" )
        while read -r LINE ; do VARFILES=("$LINE" "${VARFILES[@]}") ; done < <( _rfindfiles "$PKR_AUTO_CONFIG_FILE.json" )
    fi
}
# This function takes an array and processes it for arguments from the Terraformsh
# command-line. First it grabs PKRVARS files. Then it takes Terraform commands
# and arguments and splits theme up into pairs. The result is stuffed into the
# CMD_PAIRS global array, since we can't return arrays in Bash.
_process_cmds () {
    declare -a cmds=("$@")
    local s=0 p=0 found_cmds=0 cpi=0
    # First extract any PKRVARS passed as initial arguments
    while [ $s -lt ${#cmds[@]} ] ; do
        cmd="${cmds[$s]}"
        # If a config file was passed as a command, add them as options
        if  [ "$(expr "$cmd" : ".*\.pkr\.hcl$")" -ne 0 ] \
              || [ "$(expr "$cmd" : ".*\.sh\.pkr\.hcl$")" -ne 0 ] \
              || [ "$(expr "$cmd" : ".*\.pkr\.json$")" -ne 0 ] \
              || [ "$(expr "$cmd" : ".*\.sh\.pkr\.json$")" -ne 0 ]
        then  VARFILES+=("$(_readlinkf --preserve-link "$cmd")")
        else  break
        fi
        s=$((s+1))
    done
    # Then skip those PKRVARS and start extracting commands and options, putting
    # them into arrays in CMD_PAIRS.
    cpi=${#CMD_PAIRS[@]} # Save this for later, in case this array was already
    p=$cpi               # populated before this function.
    prev='' prevcmd=''
    #for (( i = s; i < (${#cmds[@]}-s) ; i++ )) ; do
    for cmd in "${cmds[@]:$s}" ; do
        local valid_cmd=0
        for possiblecmd in "${PKR_COMMANDS[@]}" "${WRAPPER_COMMANDS[@]}" ; do
            if [ "$possiblecmd" = "$cmd" ] ; then
                if [ "$prev" = "cmd" ] && declare -p "PKR_CMDS_$prevcmd" 2>/dev/null 1>&2 ; then
                    declare -n arr="PKR_CMDS_$prevcmd"
                    for subcmd in "${arr[@]}" ; do
                        [ "$subcmd" = "$cmd" ] && valid_cmd=2 && break
                    done
                fi
                [ $valid_cmd -eq 2 ] && break
                valid_cmd=1
                [ $found_cmds -gt 0 ] && p=$((p+1))
                break
            fi
        done
        if [ $valid_cmd -eq 0 ] || [ $valid_cmd -eq 2 ] ; then
            if [ $found_cmds -lt 1 ] ; then
                echo "$0: Error: Found non-command '$cmd' before a command was found" ; exit 1
            fi
            [ $valid_cmd -eq 0 ] && \
                echo "$0: Warning: '$cmd' is not a valid command; passing as an option instead" 1>&2
            [ $valid_cmd -eq 2 ] && \
                echo "$0: Warning: '$cmd' is a subcommand of previous command '$prevcmd'; passing as an option" 1>&2
            CMD_PAIRS[$p]+=" $(printf "%q" "$cmd")" # The space before \$( is intentional
            prev="opt"
        else
            echo "$0: Info: Found packer command '$cmd'" 1>&2
            CMD_PAIRS[$p]="array=($(printf "%q" "$cmd")" # Yes this has a leading '(' 
            found_cmds=$((found_cmds+1))
            prev="cmd"
            prevcmd="$cmd"
        fi
    done
    for (( p = cpi; p < ${#CMD_PAIRS[@]}; p++ )) ; do
        CMD_PAIRS[$p]+=")"
    done
    if [ $(( ${#cmds[@]} - $s )) -lt 1 ] ; then
        echo "$0: Error: No COMMAND was specified"; echo ""; _usage
    fi
}
_dirchange () {
    # Change to directories
    if [ -n "${CD_DIR:-}" ] ; then
        printf "+ cd \"%s\"\n" "$CD_DIR" 1>&2
        cd "$CD_DIR"
    fi
}
_readlinkf () {
    [ "${1:-}" = "--preserve-link" ] && shift 1 && __pl__=1;
    [ "${1:-}" ] || return 1; m_s=40; CDPATH=''; t=$1; [ -e "${t%/}" ] || t=${1%"${1##*[!/]}"}
    [ -d "${t:-/}" ] && t="$t/"; cd -P . 2>/dev/null || return 1; 
    while [ "$m_s" -ge 0 ] && m_s=$((m_s - 1)); do
      if [ ! "$t" = "${t%/*}" ]; then case $t in 
        /*) cd -P "${t%/*}/"  || break ;;
        *) cd -P "./${t%/*}"  || break ;;
        esac; t=${t##*/}; fi
      if [ ! -L "$t" ] || [ "${__pl__}" = "1" ]; then t="${PWD%/}${t:+/}${t}"; printf '%s\n' "${t:-/}"; return 0; fi
      link=$(ls -dl -- "$t" 2>/dev/null) || break; t=${link#*" $t -> "}
    done; return 1
}
_rfindfiles () {
    local file="$1"
    cwd="$(pwd)"
    while [ ! "$(dirname "$cwd")" = "/" ] ; do
        if [ -e "$cwd/$file" ] ; then
            printf "%s\n" "$cwd/$file"
        fi
        cwd="$(dirname "$cwd")"
    done
}
_runcmd () {
    echo "+ $*" 1>&2
    if [ ! "${DRYRUN:-0}" = "1" ] ; then "$@"; fi
}

# ---------------------------------------------------------------------------------------- #
# ------------------           parse cmdline options           --------------------------- #

SHOW_HELP=0
declare -a VARFILE_ARG=() VARFILES=() 
declare -a REFRESH_ARGS=() INIT_ARGS=() IMPORT_ARGS=() GET_ARGS=() STATE_ARGS=()
declare -a PLAN_ARGS=() APPLY_ARGS=() PLANDESTROY_ARGS=() DESTROY_ARGS=()
declare -a CONSOLE_ARGS=() TAINT_ARGS=() UNTAINT_ARGS=() OUTPUT_ARGS=()
declare -a FORCEUNLOCK_ARGS=()
declare -a CMDS=() CMD_PAIRS=() CONF_FILE=()

_default_vars

while getopts "f:b:C:c:E:IPDNnhv" args ; do
    case $args in
        f)  VARFILES+=("$(_readlinkf "$OPTARG")") ;;
        T)  PACKER_TEMPLATE="$(_readlinkf "$OPTARG")" ;;
        C)  CD_DIR="$OPTARG" ;;
        c)  CONF_FILE+=("$OPTARG") ;;
        E)  eval "$OPTARG" ;;
        I)  INHERIT_PKRFILES=0 ;;
        D)  NO_DEP_CMDS=1 ;;
        N)  DRYRUN=1 ;;
        n)  NO_CLEANUP_TMP=1 ;;
        h)  SHOW_HELP=1 ;;
        v)  export DEBUG=1 ;;
        *)
            echo "$0: Error: unknown option $args" ; exit 1 ;;
    esac
done
shift $(($OPTIND-1))

[ $SHOW_HELP -eq 1 ] && _usage

# ---------------------------------------------------------------------------------------- #
# --------------------         run the commands            ------------------------------- #

[ "${DEBUG:-0}" = "1" ] && set -x

_load_parent_pkrfiles
_load_conf

[ ${#CMDS[@]} -eq 0 ] && CMDS=("$@")

_process_cmds "${CMDS[@]}"
_pre_dirchange_vars
_dirchange
_final_vars

for pair in "${CMD_PAIRS[@]}" ; do
    eval "$pair"
    name="${array[0]}" # array is defined in 'eval $pair'
    if command -v _cmd_"$name" >/dev/null ; then
        _cmd_"$name" "${array[@]:1}"
    else 
        _cmd_catchall "$name" "${array[@]:1}"
    fi
done
